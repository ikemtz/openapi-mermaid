name: 1.$(DayOfYear)$(Rev:.rr)
pool:
  demands: npm

steps:
  - checkout: self
    clean: true
    persistCredentials: true

  - script: |
      git config user.email "ikemtz@outlook.com" 
      git config user.name "Isaac Martinez"

  - task: Npm@1
    displayName: 'npm install'
    inputs:
      verbose: false

  - task: SonarCloudPrepare@1
    displayName: 'Prepare analysis on SonarCloud'
    inputs:
      SonarCloud: 'SonarCloud IkeMtz'
      organization: 'ikemtz'
      scannerMode: CLI
      configMode: manual
      cliProjectKey: 'openapi-mermaid'
      cliProjectName: 'openapi-mermaid'
      cliSources: 'src'
      extraProperties: |
        # Additional properties that will be passed to the scanner, 
        # Put one key=value per line, example:
        # sonar.exclusions=**/*.test.ts
         sonar.sources=src
         sonar.sourceEncoding=UTF-8
         sonar.exclusions=**/node_modules/**,**/jest_ouput/**,**/*.spec.ts,jest.config.js
         sonar.test.inclusions=**/*.spec.ts
         sonar.ts.tslintconfigpath=tslint.json
         sonar.typescript.lcov.reportPaths=coverage/lcov.info
         sonar.typescript.exclusions=**/node_modules/**

  - task: Npm@1
    displayName: 'npm build'
    inputs:
      command: custom
      verbose: false
      customCommand: 'run build'

  - task: Npm@1
    displayName: 'npm test'
    inputs:
      command: custom
      verbose: false
      customCommand: 'run test'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage cobertura-coverage.xml'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
      failIfCoverageEmpty: true

  - task: PublishTestResults@2
    displayName: 'Publish JUnit Test Results'
    inputs:
      searchFolder: '$(System.DefaultWorkingDirectory)/coverage/'
      testResultsFiles: junit.xml
      mergeTestResults: true
      failTaskOnFailedTests: true

  - task: SonarCloudAnalyze@1
    displayName: 'Run Code Analysis'

  - task: SonarCloudPublish@1
    displayName: 'Publish Quality Gate Result'

  - task: sonarcloud-buildbreaker@2
    displayName: 'Break build on SonarCloud quality gate failure'
    inputs:
      SonarCloud: 'SonarCloud IkeMtz'
      organization: 'ikemtz'

  - task: SnykSecurityScan@0
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      serviceConnectionEndpoint: 'synk'
      testType: 'app'
      severityThreshold: 'medium'
      monitorOnBuild: false
      failOnIssues: false
      projectName: 'openapi-mermaid'
      organization: 'ikemtz'
      testDirectory: '$(Build.SourcesDirectory)'

  - task: Npm@1
    displayName: 'npm prep:lib'
    inputs:
      command: custom
      verbose: false
      customCommand: 'run prep:lib'

  - task: Bash@3
    displayName: 'running versioneer'
    inputs:
      filePath: '$(System.DefaultWorkingDirectory)/versioneer.sh'
      arguments: '$(Build.BuildNumber)'
      workingDirectory: '$(System.DefaultWorkingDirectory)/lib/'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: prod-drop [RELEASE BUILD]'
    inputs:
      PathtoPublish: 'lib'
      ArtifactName: 'release-drop'

  - task: GitTag@5
    inputs:
      workingdir: '$(SYSTEM.DEFAULTWORKINGDIRECTORY)'
      tagUser: 'ikemtz'
      tagEmail: 'ikemtz@outlook.com'
      tag: 'oapi-$(Build.BuildNumber)'
      tagMessage: 'oapi-$(Build.BuildNumber)'
      useLightweightTags: true
      conditions: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

trigger:
  batch: true
  branches:
    include:
      - master
pr:
  branches:
    include:
      - master
